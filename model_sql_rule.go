/*
SQLRules API - Evaluation of test coverage for SQL database queries

A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query.  Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)

API version: 3.3.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlrules

import (
	"encoding/json"
)

// checks if the SqlRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlRule{}

// SqlRule Represents a single sql coverage rule. This sql can be executed against the database to determine if it is covered
type SqlRule struct {
	// A map of additional properties to store information about the execution of the rule against the database
	Summary *map[string]string `json:"summary,omitempty"`
	Id *string `json:"id,omitempty"`
	Category *string `json:"category,omitempty"`
	Maintype *string `json:"maintype,omitempty"`
	Subtype *string `json:"subtype,omitempty"`
	Location *string `json:"location,omitempty"`
	Equivalent *string `json:"equivalent,omitempty"`
	Sql *string `json:"sql,omitempty"`
	Description *string `json:"description,omitempty"`
	// This field can be used to store runtime errors when executing the sql query that represents this rule
	Error *string `json:"error,omitempty"`
}

// NewSqlRule instantiates a new SqlRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlRule() *SqlRule {
	this := SqlRule{}
	return &this
}

// NewSqlRuleWithDefaults instantiates a new SqlRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlRuleWithDefaults() *SqlRule {
	this := SqlRule{}
	return &this
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *SqlRule) GetSummary() map[string]string {
	if o == nil || IsNil(o.Summary) {
		var ret map[string]string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlRule) GetSummaryOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *SqlRule) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given map[string]string and assigns it to the Summary field.
func (o *SqlRule) SetSummary(v map[string]string) {
	o.Summary = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SqlRule) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlRule) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SqlRule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SqlRule) SetId(v string) {
	o.Id = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *SqlRule) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlRule) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *SqlRule) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *SqlRule) SetCategory(v string) {
	o.Category = &v
}

// GetMaintype returns the Maintype field value if set, zero value otherwise.
func (o *SqlRule) GetMaintype() string {
	if o == nil || IsNil(o.Maintype) {
		var ret string
		return ret
	}
	return *o.Maintype
}

// GetMaintypeOk returns a tuple with the Maintype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlRule) GetMaintypeOk() (*string, bool) {
	if o == nil || IsNil(o.Maintype) {
		return nil, false
	}
	return o.Maintype, true
}

// HasMaintype returns a boolean if a field has been set.
func (o *SqlRule) HasMaintype() bool {
	if o != nil && !IsNil(o.Maintype) {
		return true
	}

	return false
}

// SetMaintype gets a reference to the given string and assigns it to the Maintype field.
func (o *SqlRule) SetMaintype(v string) {
	o.Maintype = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *SqlRule) GetSubtype() string {
	if o == nil || IsNil(o.Subtype) {
		var ret string
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlRule) GetSubtypeOk() (*string, bool) {
	if o == nil || IsNil(o.Subtype) {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *SqlRule) HasSubtype() bool {
	if o != nil && !IsNil(o.Subtype) {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given string and assigns it to the Subtype field.
func (o *SqlRule) SetSubtype(v string) {
	o.Subtype = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *SqlRule) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlRule) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *SqlRule) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *SqlRule) SetLocation(v string) {
	o.Location = &v
}

// GetEquivalent returns the Equivalent field value if set, zero value otherwise.
func (o *SqlRule) GetEquivalent() string {
	if o == nil || IsNil(o.Equivalent) {
		var ret string
		return ret
	}
	return *o.Equivalent
}

// GetEquivalentOk returns a tuple with the Equivalent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlRule) GetEquivalentOk() (*string, bool) {
	if o == nil || IsNil(o.Equivalent) {
		return nil, false
	}
	return o.Equivalent, true
}

// HasEquivalent returns a boolean if a field has been set.
func (o *SqlRule) HasEquivalent() bool {
	if o != nil && !IsNil(o.Equivalent) {
		return true
	}

	return false
}

// SetEquivalent gets a reference to the given string and assigns it to the Equivalent field.
func (o *SqlRule) SetEquivalent(v string) {
	o.Equivalent = &v
}

// GetSql returns the Sql field value if set, zero value otherwise.
func (o *SqlRule) GetSql() string {
	if o == nil || IsNil(o.Sql) {
		var ret string
		return ret
	}
	return *o.Sql
}

// GetSqlOk returns a tuple with the Sql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlRule) GetSqlOk() (*string, bool) {
	if o == nil || IsNil(o.Sql) {
		return nil, false
	}
	return o.Sql, true
}

// HasSql returns a boolean if a field has been set.
func (o *SqlRule) HasSql() bool {
	if o != nil && !IsNil(o.Sql) {
		return true
	}

	return false
}

// SetSql gets a reference to the given string and assigns it to the Sql field.
func (o *SqlRule) SetSql(v string) {
	o.Sql = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SqlRule) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlRule) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SqlRule) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SqlRule) SetDescription(v string) {
	o.Description = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SqlRule) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlRule) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SqlRule) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *SqlRule) SetError(v string) {
	o.Error = &v
}

func (o SqlRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Maintype) {
		toSerialize["maintype"] = o.Maintype
	}
	if !IsNil(o.Subtype) {
		toSerialize["subtype"] = o.Subtype
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Equivalent) {
		toSerialize["equivalent"] = o.Equivalent
	}
	if !IsNil(o.Sql) {
		toSerialize["sql"] = o.Sql
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableSqlRule struct {
	value *SqlRule
	isSet bool
}

func (v NullableSqlRule) Get() *SqlRule {
	return v.value
}

func (v *NullableSqlRule) Set(val *SqlRule) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlRule) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlRule(val *SqlRule) *NullableSqlRule {
	return &NullableSqlRule{value: val, isSet: true}
}

func (v NullableSqlRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


