/*
SQLRules API - Evaluation of test coverage for SQL database queries

A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query.  Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)

API version: 3.3.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlrules

import (
	"encoding/json"
)

// checks if the SqlTableListBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlTableListBody{}

// SqlTableListBody Represents a list of tables that are used in a query
type SqlTableListBody struct {
	// The sql that contains this list of tables
	Sql *string `json:"sql,omitempty"`
	// If empty, the service successfully obtained this object, if not, indicates the error occurred
	Error *string `json:"error,omitempty"`
	// The list of tables used by this query
	Tables []string `json:"tables,omitempty"`
}

// NewSqlTableListBody instantiates a new SqlTableListBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlTableListBody() *SqlTableListBody {
	this := SqlTableListBody{}
	return &this
}

// NewSqlTableListBodyWithDefaults instantiates a new SqlTableListBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlTableListBodyWithDefaults() *SqlTableListBody {
	this := SqlTableListBody{}
	return &this
}

// GetSql returns the Sql field value if set, zero value otherwise.
func (o *SqlTableListBody) GetSql() string {
	if o == nil || IsNil(o.Sql) {
		var ret string
		return ret
	}
	return *o.Sql
}

// GetSqlOk returns a tuple with the Sql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlTableListBody) GetSqlOk() (*string, bool) {
	if o == nil || IsNil(o.Sql) {
		return nil, false
	}
	return o.Sql, true
}

// HasSql returns a boolean if a field has been set.
func (o *SqlTableListBody) HasSql() bool {
	if o != nil && !IsNil(o.Sql) {
		return true
	}

	return false
}

// SetSql gets a reference to the given string and assigns it to the Sql field.
func (o *SqlTableListBody) SetSql(v string) {
	o.Sql = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SqlTableListBody) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlTableListBody) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SqlTableListBody) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *SqlTableListBody) SetError(v string) {
	o.Error = &v
}

// GetTables returns the Tables field value if set, zero value otherwise.
func (o *SqlTableListBody) GetTables() []string {
	if o == nil || IsNil(o.Tables) {
		var ret []string
		return ret
	}
	return o.Tables
}

// GetTablesOk returns a tuple with the Tables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlTableListBody) GetTablesOk() ([]string, bool) {
	if o == nil || IsNil(o.Tables) {
		return nil, false
	}
	return o.Tables, true
}

// HasTables returns a boolean if a field has been set.
func (o *SqlTableListBody) HasTables() bool {
	if o != nil && !IsNil(o.Tables) {
		return true
	}

	return false
}

// SetTables gets a reference to the given []string and assigns it to the Tables field.
func (o *SqlTableListBody) SetTables(v []string) {
	o.Tables = v
}

func (o SqlTableListBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlTableListBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sql) {
		toSerialize["sql"] = o.Sql
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Tables) {
		toSerialize["tables"] = o.Tables
	}
	return toSerialize, nil
}

type NullableSqlTableListBody struct {
	value *SqlTableListBody
	isSet bool
}

func (v NullableSqlTableListBody) Get() *SqlTableListBody {
	return v.value
}

func (v *NullableSqlTableListBody) Set(val *SqlTableListBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlTableListBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlTableListBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlTableListBody(val *SqlTableListBody) *NullableSqlTableListBody {
	return &NullableSqlTableListBody{value: val, isSet: true}
}

func (v NullableSqlTableListBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlTableListBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


