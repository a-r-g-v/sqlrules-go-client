/*
SQLRules API - Evaluation of test coverage for SQL database queries

A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query.  Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)

API version: 3.3.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlrules

import (
	"encoding/json"
)

// checks if the DbCheck type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DbCheck{}

// DbCheck Represents a constraints associated to a table
type DbCheck struct {
	// The name of the column that has this constraint (if associated to only one column)
	Column *string `json:"column,omitempty"`
	// The name constraint as determined by jdbc
	Name *string `json:"name,omitempty"`
	// The constraint expression as determined by jdbc
	Constraint string `json:"constraint"`
}

// NewDbCheck instantiates a new DbCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbCheck(constraint string) *DbCheck {
	this := DbCheck{}
	this.Constraint = constraint
	return &this
}

// NewDbCheckWithDefaults instantiates a new DbCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbCheckWithDefaults() *DbCheck {
	this := DbCheck{}
	return &this
}

// GetColumn returns the Column field value if set, zero value otherwise.
func (o *DbCheck) GetColumn() string {
	if o == nil || IsNil(o.Column) {
		var ret string
		return ret
	}
	return *o.Column
}

// GetColumnOk returns a tuple with the Column field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbCheck) GetColumnOk() (*string, bool) {
	if o == nil || IsNil(o.Column) {
		return nil, false
	}
	return o.Column, true
}

// HasColumn returns a boolean if a field has been set.
func (o *DbCheck) HasColumn() bool {
	if o != nil && !IsNil(o.Column) {
		return true
	}

	return false
}

// SetColumn gets a reference to the given string and assigns it to the Column field.
func (o *DbCheck) SetColumn(v string) {
	o.Column = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DbCheck) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbCheck) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DbCheck) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DbCheck) SetName(v string) {
	o.Name = &v
}

// GetConstraint returns the Constraint field value
func (o *DbCheck) GetConstraint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Constraint
}

// GetConstraintOk returns a tuple with the Constraint field value
// and a boolean to check if the value has been set.
func (o *DbCheck) GetConstraintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Constraint, true
}

// SetConstraint sets field value
func (o *DbCheck) SetConstraint(v string) {
	o.Constraint = v
}

func (o DbCheck) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DbCheck) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Column) {
		toSerialize["column"] = o.Column
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["constraint"] = o.Constraint
	return toSerialize, nil
}

type NullableDbCheck struct {
	value *DbCheck
	isSet bool
}

func (v NullableDbCheck) Get() *DbCheck {
	return v.value
}

func (v *NullableDbCheck) Set(val *DbCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableDbCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableDbCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbCheck(val *DbCheck) *NullableDbCheck {
	return &NullableDbCheck{value: val, isSet: true}
}

func (v NullableDbCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


