/*
SQLRules API - Evaluation of test coverage for SQL database queries

A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query.  Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)

API version: 3.3.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlrules

import (
	"encoding/json"
)

// checks if the DbTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DbTable{}

// DbTable Represents a table in the database. To generate sql coverage rules, at least `name` must be specified
type DbTable struct {
	// The name of this table
	Name *string `json:"name,omitempty"`
	// The type of this table as returned by jdbc, eg. `table`,`view`, `type`, NOTE, `type` tables hold User Defined Types (UDT), also called object, record or row (as named in SQL99)
	Tabletype *string `json:"tabletype,omitempty"`
	// A map of additional table properties to store information required by other applications
	Extended *map[string]string `json:"extended,omitempty"`
	// The set of columns in this table
	Columns []DbColumn `json:"columns,omitempty"`
	// The set of check constraints associated to the columns of this table
	Checks []DbCheck `json:"checks,omitempty"`
	// Sql statements (dml) to create and/or drop this table Used by applications that require manage the table included in this schema
	Ddls []Ddl `json:"ddls,omitempty"`
}

// NewDbTable instantiates a new DbTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbTable() *DbTable {
	this := DbTable{}
	return &this
}

// NewDbTableWithDefaults instantiates a new DbTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbTableWithDefaults() *DbTable {
	this := DbTable{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DbTable) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbTable) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DbTable) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DbTable) SetName(v string) {
	o.Name = &v
}

// GetTabletype returns the Tabletype field value if set, zero value otherwise.
func (o *DbTable) GetTabletype() string {
	if o == nil || IsNil(o.Tabletype) {
		var ret string
		return ret
	}
	return *o.Tabletype
}

// GetTabletypeOk returns a tuple with the Tabletype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbTable) GetTabletypeOk() (*string, bool) {
	if o == nil || IsNil(o.Tabletype) {
		return nil, false
	}
	return o.Tabletype, true
}

// HasTabletype returns a boolean if a field has been set.
func (o *DbTable) HasTabletype() bool {
	if o != nil && !IsNil(o.Tabletype) {
		return true
	}

	return false
}

// SetTabletype gets a reference to the given string and assigns it to the Tabletype field.
func (o *DbTable) SetTabletype(v string) {
	o.Tabletype = &v
}

// GetExtended returns the Extended field value if set, zero value otherwise.
func (o *DbTable) GetExtended() map[string]string {
	if o == nil || IsNil(o.Extended) {
		var ret map[string]string
		return ret
	}
	return *o.Extended
}

// GetExtendedOk returns a tuple with the Extended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbTable) GetExtendedOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Extended) {
		return nil, false
	}
	return o.Extended, true
}

// HasExtended returns a boolean if a field has been set.
func (o *DbTable) HasExtended() bool {
	if o != nil && !IsNil(o.Extended) {
		return true
	}

	return false
}

// SetExtended gets a reference to the given map[string]string and assigns it to the Extended field.
func (o *DbTable) SetExtended(v map[string]string) {
	o.Extended = &v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *DbTable) GetColumns() []DbColumn {
	if o == nil || IsNil(o.Columns) {
		var ret []DbColumn
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbTable) GetColumnsOk() ([]DbColumn, bool) {
	if o == nil || IsNil(o.Columns) {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *DbTable) HasColumns() bool {
	if o != nil && !IsNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []DbColumn and assigns it to the Columns field.
func (o *DbTable) SetColumns(v []DbColumn) {
	o.Columns = v
}

// GetChecks returns the Checks field value if set, zero value otherwise.
func (o *DbTable) GetChecks() []DbCheck {
	if o == nil || IsNil(o.Checks) {
		var ret []DbCheck
		return ret
	}
	return o.Checks
}

// GetChecksOk returns a tuple with the Checks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbTable) GetChecksOk() ([]DbCheck, bool) {
	if o == nil || IsNil(o.Checks) {
		return nil, false
	}
	return o.Checks, true
}

// HasChecks returns a boolean if a field has been set.
func (o *DbTable) HasChecks() bool {
	if o != nil && !IsNil(o.Checks) {
		return true
	}

	return false
}

// SetChecks gets a reference to the given []DbCheck and assigns it to the Checks field.
func (o *DbTable) SetChecks(v []DbCheck) {
	o.Checks = v
}

// GetDdls returns the Ddls field value if set, zero value otherwise.
func (o *DbTable) GetDdls() []Ddl {
	if o == nil || IsNil(o.Ddls) {
		var ret []Ddl
		return ret
	}
	return o.Ddls
}

// GetDdlsOk returns a tuple with the Ddls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbTable) GetDdlsOk() ([]Ddl, bool) {
	if o == nil || IsNil(o.Ddls) {
		return nil, false
	}
	return o.Ddls, true
}

// HasDdls returns a boolean if a field has been set.
func (o *DbTable) HasDdls() bool {
	if o != nil && !IsNil(o.Ddls) {
		return true
	}

	return false
}

// SetDdls gets a reference to the given []Ddl and assigns it to the Ddls field.
func (o *DbTable) SetDdls(v []Ddl) {
	o.Ddls = v
}

func (o DbTable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DbTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Tabletype) {
		toSerialize["tabletype"] = o.Tabletype
	}
	if !IsNil(o.Extended) {
		toSerialize["extended"] = o.Extended
	}
	if !IsNil(o.Columns) {
		toSerialize["columns"] = o.Columns
	}
	if !IsNil(o.Checks) {
		toSerialize["checks"] = o.Checks
	}
	if !IsNil(o.Ddls) {
		toSerialize["ddls"] = o.Ddls
	}
	return toSerialize, nil
}

type NullableDbTable struct {
	value *DbTable
	isSet bool
}

func (v NullableDbTable) Get() *DbTable {
	return v.value
}

func (v *NullableDbTable) Set(val *DbTable) {
	v.value = val
	v.isSet = true
}

func (v NullableDbTable) IsSet() bool {
	return v.isSet
}

func (v *NullableDbTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbTable(val *DbTable) *NullableDbTable {
	return &NullableDbTable{value: val, isSet: true}
}

func (v NullableDbTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


