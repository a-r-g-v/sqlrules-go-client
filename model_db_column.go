/*
SQLRules API - Evaluation of test coverage for SQL database queries

A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query.  Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)

API version: 3.3.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlrules

import (
	"encoding/json"
)

// checks if the DbColumn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DbColumn{}

// DbColumn Represents a column in a table. To generate sql coverage rules, at least `name` and `datatype` must be specified
type DbColumn struct {
	// The name of this column
	Name *string `json:"name,omitempty"`
	// The datatype of this column. NOTE, the size of the type (scale), if defined, is stored in the `size` field, eg. given a `VARCHAR(10)`, this field stores `VARCHAR` and the `size` field stores `10`
	Datatype *string `json:"datatype,omitempty"`
	// If the datatype is not primitive this attibute holds `array` or `type`, NOTE, If this field is `array` then the `datatype` holds the type of each array item, If this field is `type` refers the UDT that must be defined in another table
	Compositetype *string `json:"compositetype,omitempty"`
	// A modifier of the datatype, eg. given a `DATETIME WITH TIMEZONE`, this field stores `WITH TIMEZONE` and the datatype field stores `DATETIME`
	Subtype *string `json:"subtype,omitempty"`
	// The size of the datatype of this column. If the size is composed by precision and scale, both values must be separated by a comma, eg. given a `DECIMAL(10,2)`, this fiel stores the value `10,2`
	Size *string `json:"size,omitempty"`
	// if this value is `true`, the column is part of the primary key
	Key *string `json:"key,omitempty"`
	// if this value is `true`, the value of the column is autogenerated when a new instance is created
	Autoincrement *string `json:"autoincrement,omitempty"`
	// if this value is `true`, the column is not nullable (declared with NOT NULL)
	Notnull *string `json:"notnull,omitempty"`
	// If this value is non empty, represents the referenced column in a foreign key constraint. This value must be in the form `<table-name>.<column-name>`
	Fk *string `json:"fk,omitempty"`
	// The foreign constrain name as determined by jdbc
	Fkname *string `json:"fkname,omitempty"`
	// If the check constraint applicable to this column specifies a list of allowed literals, this field may indicate the set of comma separated allowed values, eg. `'Y','N'` represents a fied that can have only these two values
	Checkin *string `json:"checkin,omitempty"`
	// The default value applicable to this column
	Defaultvalue *string `json:"defaultvalue,omitempty"`
	// A map of additional column properties to store information required by other applications
	Extended *map[string]string `json:"extended,omitempty"`
}

// NewDbColumn instantiates a new DbColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbColumn() *DbColumn {
	this := DbColumn{}
	return &this
}

// NewDbColumnWithDefaults instantiates a new DbColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbColumnWithDefaults() *DbColumn {
	this := DbColumn{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DbColumn) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbColumn) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DbColumn) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DbColumn) SetName(v string) {
	o.Name = &v
}

// GetDatatype returns the Datatype field value if set, zero value otherwise.
func (o *DbColumn) GetDatatype() string {
	if o == nil || IsNil(o.Datatype) {
		var ret string
		return ret
	}
	return *o.Datatype
}

// GetDatatypeOk returns a tuple with the Datatype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbColumn) GetDatatypeOk() (*string, bool) {
	if o == nil || IsNil(o.Datatype) {
		return nil, false
	}
	return o.Datatype, true
}

// HasDatatype returns a boolean if a field has been set.
func (o *DbColumn) HasDatatype() bool {
	if o != nil && !IsNil(o.Datatype) {
		return true
	}

	return false
}

// SetDatatype gets a reference to the given string and assigns it to the Datatype field.
func (o *DbColumn) SetDatatype(v string) {
	o.Datatype = &v
}

// GetCompositetype returns the Compositetype field value if set, zero value otherwise.
func (o *DbColumn) GetCompositetype() string {
	if o == nil || IsNil(o.Compositetype) {
		var ret string
		return ret
	}
	return *o.Compositetype
}

// GetCompositetypeOk returns a tuple with the Compositetype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbColumn) GetCompositetypeOk() (*string, bool) {
	if o == nil || IsNil(o.Compositetype) {
		return nil, false
	}
	return o.Compositetype, true
}

// HasCompositetype returns a boolean if a field has been set.
func (o *DbColumn) HasCompositetype() bool {
	if o != nil && !IsNil(o.Compositetype) {
		return true
	}

	return false
}

// SetCompositetype gets a reference to the given string and assigns it to the Compositetype field.
func (o *DbColumn) SetCompositetype(v string) {
	o.Compositetype = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *DbColumn) GetSubtype() string {
	if o == nil || IsNil(o.Subtype) {
		var ret string
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbColumn) GetSubtypeOk() (*string, bool) {
	if o == nil || IsNil(o.Subtype) {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *DbColumn) HasSubtype() bool {
	if o != nil && !IsNil(o.Subtype) {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given string and assigns it to the Subtype field.
func (o *DbColumn) SetSubtype(v string) {
	o.Subtype = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *DbColumn) GetSize() string {
	if o == nil || IsNil(o.Size) {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbColumn) GetSizeOk() (*string, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *DbColumn) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *DbColumn) SetSize(v string) {
	o.Size = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *DbColumn) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbColumn) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *DbColumn) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *DbColumn) SetKey(v string) {
	o.Key = &v
}

// GetAutoincrement returns the Autoincrement field value if set, zero value otherwise.
func (o *DbColumn) GetAutoincrement() string {
	if o == nil || IsNil(o.Autoincrement) {
		var ret string
		return ret
	}
	return *o.Autoincrement
}

// GetAutoincrementOk returns a tuple with the Autoincrement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbColumn) GetAutoincrementOk() (*string, bool) {
	if o == nil || IsNil(o.Autoincrement) {
		return nil, false
	}
	return o.Autoincrement, true
}

// HasAutoincrement returns a boolean if a field has been set.
func (o *DbColumn) HasAutoincrement() bool {
	if o != nil && !IsNil(o.Autoincrement) {
		return true
	}

	return false
}

// SetAutoincrement gets a reference to the given string and assigns it to the Autoincrement field.
func (o *DbColumn) SetAutoincrement(v string) {
	o.Autoincrement = &v
}

// GetNotnull returns the Notnull field value if set, zero value otherwise.
func (o *DbColumn) GetNotnull() string {
	if o == nil || IsNil(o.Notnull) {
		var ret string
		return ret
	}
	return *o.Notnull
}

// GetNotnullOk returns a tuple with the Notnull field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbColumn) GetNotnullOk() (*string, bool) {
	if o == nil || IsNil(o.Notnull) {
		return nil, false
	}
	return o.Notnull, true
}

// HasNotnull returns a boolean if a field has been set.
func (o *DbColumn) HasNotnull() bool {
	if o != nil && !IsNil(o.Notnull) {
		return true
	}

	return false
}

// SetNotnull gets a reference to the given string and assigns it to the Notnull field.
func (o *DbColumn) SetNotnull(v string) {
	o.Notnull = &v
}

// GetFk returns the Fk field value if set, zero value otherwise.
func (o *DbColumn) GetFk() string {
	if o == nil || IsNil(o.Fk) {
		var ret string
		return ret
	}
	return *o.Fk
}

// GetFkOk returns a tuple with the Fk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbColumn) GetFkOk() (*string, bool) {
	if o == nil || IsNil(o.Fk) {
		return nil, false
	}
	return o.Fk, true
}

// HasFk returns a boolean if a field has been set.
func (o *DbColumn) HasFk() bool {
	if o != nil && !IsNil(o.Fk) {
		return true
	}

	return false
}

// SetFk gets a reference to the given string and assigns it to the Fk field.
func (o *DbColumn) SetFk(v string) {
	o.Fk = &v
}

// GetFkname returns the Fkname field value if set, zero value otherwise.
func (o *DbColumn) GetFkname() string {
	if o == nil || IsNil(o.Fkname) {
		var ret string
		return ret
	}
	return *o.Fkname
}

// GetFknameOk returns a tuple with the Fkname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbColumn) GetFknameOk() (*string, bool) {
	if o == nil || IsNil(o.Fkname) {
		return nil, false
	}
	return o.Fkname, true
}

// HasFkname returns a boolean if a field has been set.
func (o *DbColumn) HasFkname() bool {
	if o != nil && !IsNil(o.Fkname) {
		return true
	}

	return false
}

// SetFkname gets a reference to the given string and assigns it to the Fkname field.
func (o *DbColumn) SetFkname(v string) {
	o.Fkname = &v
}

// GetCheckin returns the Checkin field value if set, zero value otherwise.
func (o *DbColumn) GetCheckin() string {
	if o == nil || IsNil(o.Checkin) {
		var ret string
		return ret
	}
	return *o.Checkin
}

// GetCheckinOk returns a tuple with the Checkin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbColumn) GetCheckinOk() (*string, bool) {
	if o == nil || IsNil(o.Checkin) {
		return nil, false
	}
	return o.Checkin, true
}

// HasCheckin returns a boolean if a field has been set.
func (o *DbColumn) HasCheckin() bool {
	if o != nil && !IsNil(o.Checkin) {
		return true
	}

	return false
}

// SetCheckin gets a reference to the given string and assigns it to the Checkin field.
func (o *DbColumn) SetCheckin(v string) {
	o.Checkin = &v
}

// GetDefaultvalue returns the Defaultvalue field value if set, zero value otherwise.
func (o *DbColumn) GetDefaultvalue() string {
	if o == nil || IsNil(o.Defaultvalue) {
		var ret string
		return ret
	}
	return *o.Defaultvalue
}

// GetDefaultvalueOk returns a tuple with the Defaultvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbColumn) GetDefaultvalueOk() (*string, bool) {
	if o == nil || IsNil(o.Defaultvalue) {
		return nil, false
	}
	return o.Defaultvalue, true
}

// HasDefaultvalue returns a boolean if a field has been set.
func (o *DbColumn) HasDefaultvalue() bool {
	if o != nil && !IsNil(o.Defaultvalue) {
		return true
	}

	return false
}

// SetDefaultvalue gets a reference to the given string and assigns it to the Defaultvalue field.
func (o *DbColumn) SetDefaultvalue(v string) {
	o.Defaultvalue = &v
}

// GetExtended returns the Extended field value if set, zero value otherwise.
func (o *DbColumn) GetExtended() map[string]string {
	if o == nil || IsNil(o.Extended) {
		var ret map[string]string
		return ret
	}
	return *o.Extended
}

// GetExtendedOk returns a tuple with the Extended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbColumn) GetExtendedOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Extended) {
		return nil, false
	}
	return o.Extended, true
}

// HasExtended returns a boolean if a field has been set.
func (o *DbColumn) HasExtended() bool {
	if o != nil && !IsNil(o.Extended) {
		return true
	}

	return false
}

// SetExtended gets a reference to the given map[string]string and assigns it to the Extended field.
func (o *DbColumn) SetExtended(v map[string]string) {
	o.Extended = &v
}

func (o DbColumn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DbColumn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Datatype) {
		toSerialize["datatype"] = o.Datatype
	}
	if !IsNil(o.Compositetype) {
		toSerialize["compositetype"] = o.Compositetype
	}
	if !IsNil(o.Subtype) {
		toSerialize["subtype"] = o.Subtype
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Autoincrement) {
		toSerialize["autoincrement"] = o.Autoincrement
	}
	if !IsNil(o.Notnull) {
		toSerialize["notnull"] = o.Notnull
	}
	if !IsNil(o.Fk) {
		toSerialize["fk"] = o.Fk
	}
	if !IsNil(o.Fkname) {
		toSerialize["fkname"] = o.Fkname
	}
	if !IsNil(o.Checkin) {
		toSerialize["checkin"] = o.Checkin
	}
	if !IsNil(o.Defaultvalue) {
		toSerialize["defaultvalue"] = o.Defaultvalue
	}
	if !IsNil(o.Extended) {
		toSerialize["extended"] = o.Extended
	}
	return toSerialize, nil
}

type NullableDbColumn struct {
	value *DbColumn
	isSet bool
}

func (v NullableDbColumn) Get() *DbColumn {
	return v.value
}

func (v *NullableDbColumn) Set(val *DbColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableDbColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableDbColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbColumn(val *DbColumn) *NullableDbColumn {
	return &NullableDbColumn{value: val, isSet: true}
}

func (v NullableDbColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


