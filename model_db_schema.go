/*
SQLRules API - Evaluation of test coverage for SQL database queries

A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query.  Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)

API version: 3.3.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlrules

import (
	"encoding/json"
)

// checks if the DbSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DbSchema{}

// DbSchema Represents the schema of the database. The xml or json for the current database can be extracted using a jdbc connection with the [XDBSchema application](https://in2test.lsi.uniovi.es/sqltools/xdbschema)
type DbSchema struct {
	// The name of the database catalog as returned by jdbc
	Catalog *string `json:"catalog,omitempty"`
	// The name of the database schema as returned by jdbc
	Schema *string `json:"schema,omitempty"`
	// A string representing the database vendor name returned by jdbc, eg. `postgres`, `oracle`, `sqlserver`. To be used by applications to handle vendor specific database features
	Dbms *string `json:"dbms,omitempty"`
	// The set of tables included in this schema
	Tables []DbTable `json:"tables,omitempty"`
}

// NewDbSchema instantiates a new DbSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbSchema() *DbSchema {
	this := DbSchema{}
	return &this
}

// NewDbSchemaWithDefaults instantiates a new DbSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbSchemaWithDefaults() *DbSchema {
	this := DbSchema{}
	return &this
}

// GetCatalog returns the Catalog field value if set, zero value otherwise.
func (o *DbSchema) GetCatalog() string {
	if o == nil || IsNil(o.Catalog) {
		var ret string
		return ret
	}
	return *o.Catalog
}

// GetCatalogOk returns a tuple with the Catalog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbSchema) GetCatalogOk() (*string, bool) {
	if o == nil || IsNil(o.Catalog) {
		return nil, false
	}
	return o.Catalog, true
}

// HasCatalog returns a boolean if a field has been set.
func (o *DbSchema) HasCatalog() bool {
	if o != nil && !IsNil(o.Catalog) {
		return true
	}

	return false
}

// SetCatalog gets a reference to the given string and assigns it to the Catalog field.
func (o *DbSchema) SetCatalog(v string) {
	o.Catalog = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *DbSchema) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbSchema) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *DbSchema) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *DbSchema) SetSchema(v string) {
	o.Schema = &v
}

// GetDbms returns the Dbms field value if set, zero value otherwise.
func (o *DbSchema) GetDbms() string {
	if o == nil || IsNil(o.Dbms) {
		var ret string
		return ret
	}
	return *o.Dbms
}

// GetDbmsOk returns a tuple with the Dbms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbSchema) GetDbmsOk() (*string, bool) {
	if o == nil || IsNil(o.Dbms) {
		return nil, false
	}
	return o.Dbms, true
}

// HasDbms returns a boolean if a field has been set.
func (o *DbSchema) HasDbms() bool {
	if o != nil && !IsNil(o.Dbms) {
		return true
	}

	return false
}

// SetDbms gets a reference to the given string and assigns it to the Dbms field.
func (o *DbSchema) SetDbms(v string) {
	o.Dbms = &v
}

// GetTables returns the Tables field value if set, zero value otherwise.
func (o *DbSchema) GetTables() []DbTable {
	if o == nil || IsNil(o.Tables) {
		var ret []DbTable
		return ret
	}
	return o.Tables
}

// GetTablesOk returns a tuple with the Tables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbSchema) GetTablesOk() ([]DbTable, bool) {
	if o == nil || IsNil(o.Tables) {
		return nil, false
	}
	return o.Tables, true
}

// HasTables returns a boolean if a field has been set.
func (o *DbSchema) HasTables() bool {
	if o != nil && !IsNil(o.Tables) {
		return true
	}

	return false
}

// SetTables gets a reference to the given []DbTable and assigns it to the Tables field.
func (o *DbSchema) SetTables(v []DbTable) {
	o.Tables = v
}

func (o DbSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DbSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Catalog) {
		toSerialize["catalog"] = o.Catalog
	}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	if !IsNil(o.Dbms) {
		toSerialize["dbms"] = o.Dbms
	}
	if !IsNil(o.Tables) {
		toSerialize["tables"] = o.Tables
	}
	return toSerialize, nil
}

type NullableDbSchema struct {
	value *DbSchema
	isSet bool
}

func (v NullableDbSchema) Get() *DbSchema {
	return v.value
}

func (v *NullableDbSchema) Set(val *DbSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableDbSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableDbSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbSchema(val *DbSchema) *NullableDbSchema {
	return &NullableDbSchema{value: val, isSet: true}
}

func (v NullableDbSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


