/*
SQLRules API - Evaluation of test coverage for SQL database queries

A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query.  Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)

API version: 3.3.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlrules

import (
	"encoding/json"
)

// checks if the SqlParametersBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlParametersBody{}

// SqlParametersBody Represents a transformed parametrized query and the mapping parameter-values
type SqlParametersBody struct {
	// The source (non-parametrized)
	Sql *string `json:"sql,omitempty"`
	// The transformed parametrized sql
	Parsedsql *string `json:"parsedsql,omitempty"`
	// If empty, the service successfully obtained this object, if not, indicates the error occurred
	Error *string `json:"error,omitempty"`
	// The list of parameters that have been extracted from the query
	Parameters []SqlParam `json:"parameters,omitempty"`
}

// NewSqlParametersBody instantiates a new SqlParametersBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlParametersBody() *SqlParametersBody {
	this := SqlParametersBody{}
	return &this
}

// NewSqlParametersBodyWithDefaults instantiates a new SqlParametersBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlParametersBodyWithDefaults() *SqlParametersBody {
	this := SqlParametersBody{}
	return &this
}

// GetSql returns the Sql field value if set, zero value otherwise.
func (o *SqlParametersBody) GetSql() string {
	if o == nil || IsNil(o.Sql) {
		var ret string
		return ret
	}
	return *o.Sql
}

// GetSqlOk returns a tuple with the Sql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlParametersBody) GetSqlOk() (*string, bool) {
	if o == nil || IsNil(o.Sql) {
		return nil, false
	}
	return o.Sql, true
}

// HasSql returns a boolean if a field has been set.
func (o *SqlParametersBody) HasSql() bool {
	if o != nil && !IsNil(o.Sql) {
		return true
	}

	return false
}

// SetSql gets a reference to the given string and assigns it to the Sql field.
func (o *SqlParametersBody) SetSql(v string) {
	o.Sql = &v
}

// GetParsedsql returns the Parsedsql field value if set, zero value otherwise.
func (o *SqlParametersBody) GetParsedsql() string {
	if o == nil || IsNil(o.Parsedsql) {
		var ret string
		return ret
	}
	return *o.Parsedsql
}

// GetParsedsqlOk returns a tuple with the Parsedsql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlParametersBody) GetParsedsqlOk() (*string, bool) {
	if o == nil || IsNil(o.Parsedsql) {
		return nil, false
	}
	return o.Parsedsql, true
}

// HasParsedsql returns a boolean if a field has been set.
func (o *SqlParametersBody) HasParsedsql() bool {
	if o != nil && !IsNil(o.Parsedsql) {
		return true
	}

	return false
}

// SetParsedsql gets a reference to the given string and assigns it to the Parsedsql field.
func (o *SqlParametersBody) SetParsedsql(v string) {
	o.Parsedsql = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SqlParametersBody) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlParametersBody) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SqlParametersBody) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *SqlParametersBody) SetError(v string) {
	o.Error = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *SqlParametersBody) GetParameters() []SqlParam {
	if o == nil || IsNil(o.Parameters) {
		var ret []SqlParam
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlParametersBody) GetParametersOk() ([]SqlParam, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *SqlParametersBody) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []SqlParam and assigns it to the Parameters field.
func (o *SqlParametersBody) SetParameters(v []SqlParam) {
	o.Parameters = v
}

func (o SqlParametersBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlParametersBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sql) {
		toSerialize["sql"] = o.Sql
	}
	if !IsNil(o.Parsedsql) {
		toSerialize["parsedsql"] = o.Parsedsql
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

type NullableSqlParametersBody struct {
	value *SqlParametersBody
	isSet bool
}

func (v NullableSqlParametersBody) Get() *SqlParametersBody {
	return v.value
}

func (v *NullableSqlParametersBody) Set(val *SqlParametersBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlParametersBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlParametersBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlParametersBody(val *SqlParametersBody) *NullableSqlParametersBody {
	return &NullableSqlParametersBody{value: val, isSet: true}
}

func (v NullableSqlParametersBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlParametersBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


