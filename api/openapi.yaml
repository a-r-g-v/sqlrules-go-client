openapi: 3.0.1
info:
  description: "A set of services to evaluate the coverage of SQL database queries.\
    \ Coverage criteria are implemented in a set of rules, that when evaluated with\
    \ respect to a given database determine the coverage of the database with respect\
    \ to the query.\r\nTwo kind of coverage rules are generated, Full Predicate Coverage\
    \ rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)"
  termsOfService: https://in2test.lsi.uniovi.es/sqltools/common/TERMS_OF_USE.html
  title: SQLRules API - Evaluation of test coverage for SQL database queries
  version: 3.3.19
servers:
- url: https://in2test.lsi.uniovi.es/sqlrules/api/v3
tags:
- description: the Sqlrules API
  name: Sqlrules
paths:
  /tables:
    post:
      operationId: tablesPost
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              description: An object that includes the sql to be processed
              type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlTableListBody'
          description: An object that contains the list of the tables referenced by
            the query
      summary: DEPRECATED - Gets the set of tables referenced in a sql query
      tags:
      - Sqlrules
  /sql/tables:
    post:
      operationId: sqlTablesPost
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              description: An object that includes the sql to be processed
              type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlTableListBody'
          description: An object that contains the list of the tables referenced by
            the query
      summary: Gets the set of tables referenced in a sql query
      tags:
      - Sqlrules
  /sql/parameters:
    post:
      operationId: sqlParametersPost
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              description: An object that includes the sql to be processed
              type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlParametersBody'
          description: An object that contains the parametrized query and the mapping
            parameter-values
      summary: Transforms a non parametrized query into a parametrized one by converting
        each literal into a parameter and returns the mapping parameter-values
      tags:
      - Sqlrules
  /rules:
    post:
      operationId: rulesPost
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/SqlRulesBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlRules'
          description: The SqlRules object generated with the sqlfpc rules
      summary: Gets the SQLFpc coverage rules for a given sql. Based on Modified Condition
        Decision Coverage (MCDC) for SQL. Each rule is an SQL statement that is covered
        if the execution against the database returns at least one row.
      tags:
      - Sqlrules
  /mutants:
    post:
      operationId: mutantsPost
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/SqlRulesBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlRules'
          description: The SqlRules object generated with the sqlmutation mutants
      summary: Gets the set of mutants for a given sql (SQLMutation). Each rule is
        a mutant of the original SQL query. The mutant is dead (i.e. the rule is covered)
        if the execution against the database returns the same rows than the original
        query.
      tags:
      - Sqlrules
components:
  schemas:
    SqlTableListBody:
      description: Represents a list of tables that are used in a query
      example:
        tables:
        - tables
        - tables
        error: error
        sql: sql
      properties:
        sql:
          description: The sql that contains this list of tables
          type: string
        error:
          description: "If empty, the service successfully obtained this object, if\
            \ not, indicates the error occurred"
          type: string
        tables:
          description: The list of tables used by this query
          items:
            description: The list of tables used by this query
            type: string
          type: array
      type: object
    SqlParam:
      description: Represents a query parameter and its value
      example:
        name: name
        value: value
      properties:
        name:
          description: the name of the parameter
          type: string
        value:
          description: the value that is assigned to the parameter
          type: string
      type: object
    SqlParametersBody:
      description: Represents a transformed parametrized query and the mapping parameter-values
      example:
        parsedsql: parsedsql
        error: error
        parameters:
        - name: name
          value: value
        - name: name
          value: value
        sql: sql
      properties:
        sql:
          description: The source (non-parametrized)
          type: string
        parsedsql:
          description: The transformed parametrized sql
          type: string
        error:
          description: "If empty, the service successfully obtained this object, if\
            \ not, indicates the error occurred"
          type: string
        parameters:
          description: The list of parameters that have been extracted from the query
          items:
            $ref: '#/components/schemas/SqlParam'
          type: array
      type: object
    SqlRule:
      description: Represents a single sql coverage rule. This sql can be executed
        against the database to determine if it is covered
      example:
        summary:
          key: summary
        equivalent: equivalent
        subtype: subtype
        description: description
        location: location
        id: id
        category: category
        error: error
        maintype: maintype
        sql: sql
      properties:
        summary:
          additionalProperties:
            description: A map of additional properties to store information about
              the execution of the rule against the database
            type: string
          description: A map of additional properties to store information about the
            execution of the rule against the database
          type: object
        id:
          type: string
        category:
          type: string
        maintype:
          type: string
        subtype:
          type: string
        location:
          type: string
        equivalent:
          type: string
        sql:
          type: string
        description:
          type: string
        error:
          description: This field can be used to store runtime errors when executing
            the sql query that represents this rule
          type: string
      type: object
    SqlRules:
      description: Represents a set of sql coverage rules...
      example:
        summary:
          key: summary
        environment: environment
        parsedsql: parsedsql
        rules:
        - summary:
            key: summary
          equivalent: equivalent
          subtype: subtype
          description: description
          location: location
          id: id
          category: category
          error: error
          maintype: maintype
          sql: sql
        - summary:
            key: summary
          equivalent: equivalent
          subtype: subtype
          description: description
          location: location
          id: id
          category: category
          error: error
          maintype: maintype
          sql: sql
        error: error
        version: version
        rulesClass: rulesClass
        sql: sql
      properties:
        rulesClass:
          description: The class of the rules generated (`sqlfpc` or `sqlmutation`)
          type: string
        version:
          description: The version number of the service that generates this rule
          type: string
        environment:
          description: The environment of the service that generates this rule
          type: string
        summary:
          additionalProperties:
            description: A map of additional properties to store information about
              the execution of the rules against the database
            type: string
          description: A map of additional properties to store information about the
            execution of the rules against the database
          type: object
        sql:
          description: The sql of the query that generates the rules
          type: string
        parsedsql:
          description: The sql after being parsed (only if specified by the `options`
            used when calling the service)
          type: string
        error:
          description: "If empty, the service successfully obtained the rules, if\
            \ not, indicates the error occurred, eg. the query is not syntactically\
            \ correct. This field can be used to store runtime errors when executing\
            \ the sql query"
          type: string
        rules:
          description: The set of rules generated
          items:
            $ref: '#/components/schemas/SqlRule'
          type: array
      type: object
    DbCheck:
      description: Represents a constraints associated to a table
      example:
        column: column
        name: name
        constraint: constraint
      properties:
        column:
          description: The name of the column that has this constraint (if associated
            to only one column)
          type: string
        name:
          description: The name constraint as determined by jdbc
          type: string
        constraint:
          description: The constraint expression as determined by jdbc
          type: string
      required:
      - constraint
      type: object
    DbColumn:
      description: "Represents a column in a table. To generate sql coverage rules,\
        \ at least `name` and `datatype` must be specified"
      example:
        fk: fk
        defaultvalue: defaultvalue
        compositetype: compositetype
        extended:
          key: extended
        checkin: checkin
        size: size
        datatype: datatype
        subtype: subtype
        autoincrement: autoincrement
        fkname: fkname
        notnull: notnull
        name: name
        key: key
      properties:
        name:
          description: The name of this column
          type: string
        datatype:
          description: "The datatype of this column. NOTE, the size of the type (scale),\
            \ if defined, is stored in the `size` field, eg. given a `VARCHAR(10)`,\
            \ this field stores `VARCHAR` and the `size` field stores `10`"
          type: string
        compositetype:
          description: "If the datatype is not primitive this attibute holds `array`\
            \ or `type`, NOTE, If this field is `array` then the `datatype` holds\
            \ the type of each array item, If this field is `type` refers the UDT\
            \ that must be defined in another table"
          type: string
        subtype:
          description: "A modifier of the datatype, eg. given a `DATETIME WITH TIMEZONE`,\
            \ this field stores `WITH TIMEZONE` and the datatype field stores `DATETIME`"
          type: string
        size:
          description: "The size of the datatype of this column. If the size is composed\
            \ by precision and scale, both values must be separated by a comma, eg.\
            \ given a `DECIMAL(10,2)`, this fiel stores the value `10,2`"
          type: string
        key:
          description: "if this value is `true`, the column is part of the primary\
            \ key"
          type: string
        autoincrement:
          description: "if this value is `true`, the value of the column is autogenerated\
            \ when a new instance is created"
          type: string
        notnull:
          description: "if this value is `true`, the column is not nullable (declared\
            \ with NOT NULL)"
          type: string
        fk:
          description: "If this value is non empty, represents the referenced column\
            \ in a foreign key constraint. This value must be in the form `<table-name>.<column-name>`"
          type: string
        fkname:
          description: The foreign constrain name as determined by jdbc
          type: string
        checkin:
          description: "If the check constraint applicable to this column specifies\
            \ a list of allowed literals, this field may indicate the set of comma\
            \ separated allowed values, eg. `'Y','N'` represents a fied that can have\
            \ only these two values"
          type: string
        defaultvalue:
          description: The default value applicable to this column
          type: string
        extended:
          additionalProperties:
            description: A map of additional column properties to store information
              required by other applications
            type: string
          description: A map of additional column properties to store information
            required by other applications
          type: object
      type: object
    DbSchema:
      description: "Represents the schema of the database. The xml or json for the\
        \ current database can be extracted using a jdbc connection with the [XDBSchema\
        \ application](https://in2test.lsi.uniovi.es/sqltools/xdbschema)"
      example:
        schema: schema
        tables:
        - tabletype: tabletype
          checks:
          - column: column
            name: name
            constraint: constraint
          - column: column
            name: name
            constraint: constraint
          columns:
          - fk: fk
            defaultvalue: defaultvalue
            compositetype: compositetype
            extended:
              key: extended
            checkin: checkin
            size: size
            datatype: datatype
            subtype: subtype
            autoincrement: autoincrement
            fkname: fkname
            notnull: notnull
            name: name
            key: key
          - fk: fk
            defaultvalue: defaultvalue
            compositetype: compositetype
            extended:
              key: extended
            checkin: checkin
            size: size
            datatype: datatype
            subtype: subtype
            autoincrement: autoincrement
            fkname: fkname
            notnull: notnull
            name: name
            key: key
          name: name
          ddls:
          - command: command
            sql: sql
          - command: command
            sql: sql
          extended:
            key: extended
        - tabletype: tabletype
          checks:
          - column: column
            name: name
            constraint: constraint
          - column: column
            name: name
            constraint: constraint
          columns:
          - fk: fk
            defaultvalue: defaultvalue
            compositetype: compositetype
            extended:
              key: extended
            checkin: checkin
            size: size
            datatype: datatype
            subtype: subtype
            autoincrement: autoincrement
            fkname: fkname
            notnull: notnull
            name: name
            key: key
          - fk: fk
            defaultvalue: defaultvalue
            compositetype: compositetype
            extended:
              key: extended
            checkin: checkin
            size: size
            datatype: datatype
            subtype: subtype
            autoincrement: autoincrement
            fkname: fkname
            notnull: notnull
            name: name
            key: key
          name: name
          ddls:
          - command: command
            sql: sql
          - command: command
            sql: sql
          extended:
            key: extended
        catalog: catalog
        dbms: dbms
      properties:
        catalog:
          description: The name of the database catalog as returned by jdbc
          type: string
        schema:
          description: The name of the database schema as returned by jdbc
          type: string
        dbms:
          description: "A string representing the database vendor name returned by\
            \ jdbc, eg. `postgres`, `oracle`, `sqlserver`. To be used by applications\
            \ to handle vendor specific database features"
          type: string
        tables:
          description: The set of tables included in this schema
          items:
            $ref: '#/components/schemas/DbTable'
          type: array
      type: object
    DbTable:
      description: "Represents a table in the database. To generate sql coverage rules,\
        \ at least `name` must be specified"
      example:
        tabletype: tabletype
        checks:
        - column: column
          name: name
          constraint: constraint
        - column: column
          name: name
          constraint: constraint
        columns:
        - fk: fk
          defaultvalue: defaultvalue
          compositetype: compositetype
          extended:
            key: extended
          checkin: checkin
          size: size
          datatype: datatype
          subtype: subtype
          autoincrement: autoincrement
          fkname: fkname
          notnull: notnull
          name: name
          key: key
        - fk: fk
          defaultvalue: defaultvalue
          compositetype: compositetype
          extended:
            key: extended
          checkin: checkin
          size: size
          datatype: datatype
          subtype: subtype
          autoincrement: autoincrement
          fkname: fkname
          notnull: notnull
          name: name
          key: key
        name: name
        ddls:
        - command: command
          sql: sql
        - command: command
          sql: sql
        extended:
          key: extended
      properties:
        name:
          description: The name of this table
          type: string
        tabletype:
          description: "The type of this table as returned by jdbc, eg. `table`,`view`,\
            \ `type`, NOTE, `type` tables hold User Defined Types (UDT), also called\
            \ object, record or row (as named in SQL99)"
          type: string
        extended:
          additionalProperties:
            description: A map of additional table properties to store information
              required by other applications
            type: string
          description: A map of additional table properties to store information required
            by other applications
          type: object
        columns:
          description: The set of columns in this table
          items:
            $ref: '#/components/schemas/DbColumn'
          type: array
        checks:
          description: The set of check constraints associated to the columns of this
            table
          items:
            $ref: '#/components/schemas/DbCheck'
          type: array
        ddls:
          description: Sql statements (dml) to create and/or drop this table Used
            by applications that require manage the table included in this schema
          items:
            $ref: '#/components/schemas/Ddl'
          type: array
      type: object
    Ddl:
      description: Represents a sql statement (dml) to create and/or drop this table
      example:
        command: command
        sql: sql
      properties:
        command:
          description: Indicates the kind of update to perform (`create` or `drop`)
          type: string
        sql:
          description: The sql to execute the update indicated by `command`
          type: string
      required:
      - command
      - sql
      type: object
    SqlRulesBody:
      description: "An object that includes the sql, schema and an optional string\
        \ with parameters"
      example:
        schema:
          schema: schema
          tables:
          - tabletype: tabletype
            checks:
            - column: column
              name: name
              constraint: constraint
            - column: column
              name: name
              constraint: constraint
            columns:
            - fk: fk
              defaultvalue: defaultvalue
              compositetype: compositetype
              extended:
                key: extended
              checkin: checkin
              size: size
              datatype: datatype
              subtype: subtype
              autoincrement: autoincrement
              fkname: fkname
              notnull: notnull
              name: name
              key: key
            - fk: fk
              defaultvalue: defaultvalue
              compositetype: compositetype
              extended:
                key: extended
              checkin: checkin
              size: size
              datatype: datatype
              subtype: subtype
              autoincrement: autoincrement
              fkname: fkname
              notnull: notnull
              name: name
              key: key
            name: name
            ddls:
            - command: command
              sql: sql
            - command: command
              sql: sql
            extended:
              key: extended
          - tabletype: tabletype
            checks:
            - column: column
              name: name
              constraint: constraint
            - column: column
              name: name
              constraint: constraint
            columns:
            - fk: fk
              defaultvalue: defaultvalue
              compositetype: compositetype
              extended:
                key: extended
              checkin: checkin
              size: size
              datatype: datatype
              subtype: subtype
              autoincrement: autoincrement
              fkname: fkname
              notnull: notnull
              name: name
              key: key
            - fk: fk
              defaultvalue: defaultvalue
              compositetype: compositetype
              extended:
                key: extended
              checkin: checkin
              size: size
              datatype: datatype
              subtype: subtype
              autoincrement: autoincrement
              fkname: fkname
              notnull: notnull
              name: name
              key: key
            name: name
            ddls:
            - command: command
              sql: sql
            - command: command
              sql: sql
            extended:
              key: extended
          catalog: catalog
          dbms: dbms
        options: options
        sql: sql
      properties:
        sql:
          description: The sql to generate the coverage rules
          type: string
        schema:
          $ref: '#/components/schemas/DbSchema'
        options:
          description: "A set of additional options to modify the behaviour of the\
            \ rule generation (strings separated by space). Allowed values are in\
            \ documented https://in2test.lsi.uniovi.es/sqlrules/api-doc.html. Some\
            \ of them are dependent of the kind of rules to be generated, <br/>Example.\
            \ `lang=en noboundary` specifies that the generated sqlfpc coverage rules\
            \ must contain an english description of the rule and rules for checking\
            \ boundary values must not been generated."
          type: string
      type: object
