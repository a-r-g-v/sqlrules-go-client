/*
SQLRules API - Evaluation of test coverage for SQL database queries

A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query.  Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)

API version: 3.3.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlrules

import (
	"encoding/json"
)

// checks if the SqlParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlParam{}

// SqlParam Represents a query parameter and its value
type SqlParam struct {
	// the name of the parameter
	Name *string `json:"name,omitempty"`
	// the value that is assigned to the parameter
	Value *string `json:"value,omitempty"`
}

// NewSqlParam instantiates a new SqlParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlParam() *SqlParam {
	this := SqlParam{}
	return &this
}

// NewSqlParamWithDefaults instantiates a new SqlParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlParamWithDefaults() *SqlParam {
	this := SqlParam{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SqlParam) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlParam) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SqlParam) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SqlParam) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SqlParam) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlParam) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SqlParam) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *SqlParam) SetValue(v string) {
	o.Value = &v
}

func (o SqlParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableSqlParam struct {
	value *SqlParam
	isSet bool
}

func (v NullableSqlParam) Get() *SqlParam {
	return v.value
}

func (v *NullableSqlParam) Set(val *SqlParam) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlParam) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlParam(val *SqlParam) *NullableSqlParam {
	return &NullableSqlParam{value: val, isSet: true}
}

func (v NullableSqlParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


