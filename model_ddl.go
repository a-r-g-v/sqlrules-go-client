/*
SQLRules API - Evaluation of test coverage for SQL database queries

A set of services to evaluate the coverage of SQL database queries. Coverage criteria are implemented in a set of rules, that when evaluated with respect to a given database determine the coverage of the database with respect to the query.  Two kind of coverage rules are generated, Full Predicate Coverage rules for SQL (SQLFpc) and Mutants for SQL (SQLMutation)

API version: 3.3.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlrules

import (
	"encoding/json"
)

// checks if the Ddl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ddl{}

// Ddl Represents a sql statement (dml) to create and/or drop this table
type Ddl struct {
	// Indicates the kind of update to perform (`create` or `drop`)
	Command string `json:"command"`
	// The sql to execute the update indicated by `command`
	Sql string `json:"sql"`
}

// NewDdl instantiates a new Ddl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDdl(command string, sql string) *Ddl {
	this := Ddl{}
	this.Command = command
	this.Sql = sql
	return &this
}

// NewDdlWithDefaults instantiates a new Ddl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDdlWithDefaults() *Ddl {
	this := Ddl{}
	return &this
}

// GetCommand returns the Command field value
func (o *Ddl) GetCommand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Command
}

// GetCommandOk returns a tuple with the Command field value
// and a boolean to check if the value has been set.
func (o *Ddl) GetCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Command, true
}

// SetCommand sets field value
func (o *Ddl) SetCommand(v string) {
	o.Command = v
}

// GetSql returns the Sql field value
func (o *Ddl) GetSql() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sql
}

// GetSqlOk returns a tuple with the Sql field value
// and a boolean to check if the value has been set.
func (o *Ddl) GetSqlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sql, true
}

// SetSql sets field value
func (o *Ddl) SetSql(v string) {
	o.Sql = v
}

func (o Ddl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ddl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["command"] = o.Command
	toSerialize["sql"] = o.Sql
	return toSerialize, nil
}

type NullableDdl struct {
	value *Ddl
	isSet bool
}

func (v NullableDdl) Get() *Ddl {
	return v.value
}

func (v *NullableDdl) Set(val *Ddl) {
	v.value = val
	v.isSet = true
}

func (v NullableDdl) IsSet() bool {
	return v.isSet
}

func (v *NullableDdl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDdl(val *Ddl) *NullableDdl {
	return &NullableDdl{value: val, isSet: true}
}

func (v NullableDdl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDdl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


